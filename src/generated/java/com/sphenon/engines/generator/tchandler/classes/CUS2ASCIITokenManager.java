/* Generated By:JavaCC: Do not edit this line. CUS2ASCIITokenManager.java */

/****************************************************************************
  Copyright 2001-2018 Sphenon GmbH

  Licensed under the Apache License, Version 2.0 (the "License"); you may not
  use this file except in compliance with the License. You may obtain a copy
  of the License at http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
  License for the specific language governing permissions and limitations
  under the License.
*****************************************************************************/
package com.sphenon.engines.generator.tchandler.classes;
import com.sphenon.basics.context.*;
import java.io.Reader;
import java.io.Writer;
import java.io.IOException;

public class CUS2ASCIITokenManager implements CUS2ASCIIConstants
{
  public  java.io.PrintStream debugStream = System.out;
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active1 & 0x2a0000000000000L) != 0L)
         {
            jjmatchedKind = 123;
            return -1;
         }
         if ((active0 & 0x8800000000000000L) != 0L || (active1 & 0x860b0000L) != 0L)
            return 4;
         if ((active0 & 0x5540000000500000L) != 0L || (active1 & 0x1100f00009L) != 0L)
            return 13;
         return -1;
      case 1:
         if ((active1 & 0x2a0000000000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 123;
               jjmatchedPos = 0;
            }
            return -1;
         }
         if ((active0 & 0x1000000000000000L) != 0L || (active1 & 0xa00001L) != 0L)
            return 14;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
private final int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private final int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 10:
         return jjStopAtPos(0, 45);
      case 37:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x18000000000000L);
      case 45:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x40000000000000L);
      case 47:
         return jjMoveStringLiteralDfa1_0(0x5540000000500000L, 0x1100f00009L);
      case 60:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x2a0000000000000L);
      case 61:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x100000000000000L);
      case 92:
         return jjStopAtPos(0, 122);
      case 171:
         return jjStopAtPos(0, 2);
      case 172:
         jjmatchedKind = 90;
         return jjMoveStringLiteralDfa1_0(0x8800000000000000L, 0x820b0000L);
      case 182:
         return jjStopAtPos(0, 97);
      case 187:
         return jjStopAtPos(0, 3);
      case 8214:
         return jjStopAtPos(0, 52);
      case 8230:
         jjmatchedKind = 39;
         return jjMoveStringLiteralDfa1_0(0x2000000000L, 0x0L);
      case 8263:
         return jjStopAtPos(0, 61);
      case 8693:
         return jjStopAtPos(0, 114);
      case 8702:
         return jjStopAtPos(0, 94);
      case 8704:
         return jjStopAtPos(0, 53);
      case 8707:
         return jjStopAtPos(0, 57);
      case 8709:
         return jjStopAtPos(0, 88);
      case 8712:
         return jjStopAtPos(0, 66);
      case 8719:
         return jjStopAtPos(0, 110);
      case 8721:
         return jjStopAtPos(0, 111);
      case 8743:
         return jjStopAtPos(0, 93);
      case 8744:
         return jjStopAtPos(0, 92);
      case 8746:
         return jjStopAtPos(0, 65);
      case 8801:
         return jjStopAtPos(0, 43);
      case 8804:
         return jjStopAtPos(0, 12);
      case 8805:
         return jjStopAtPos(0, 13);
      case 8806:
         return jjStopAtPos(0, 14);
      case 8807:
         return jjStopAtPos(0, 15);
      case 8847:
         return jjStopAtPos(0, 10);
      case 8848:
         return jjStopAtPos(0, 11);
      case 8853:
         return jjStopAtPos(0, 74);
      case 8854:
         return jjStopAtPos(0, 75);
      case 8857:
         return jjStopAtPos(0, 70);
      case 8859:
         return jjStopAtPos(0, 76);
      case 8880:
         return jjStopAtPos(0, 4);
      case 8881:
         return jjStopAtPos(0, 5);
      case 8918:
         return jjStopAtPos(0, 16);
      case 8919:
         return jjStopAtPos(0, 17);
      case 8942:
         return jjStopAtPos(0, 38);
      case 8960:
         return jjStopAtPos(0, 109);
      case 8983:
         return jjStopAtPos(0, 108);
      case 8984:
         return jjStopAtPos(0, 99);
      case 8986:
         return jjStopAtPos(0, 106);
      case 9022:
         return jjStopAtPos(0, 107);
      case 9094:
         return jjStopAtPos(0, 105);
      case 9166:
         return jjStopAtPos(0, 98);
      case 9216:
         return jjStopAtPos(0, 40);
      case 9403:
         return jjStopAtPos(0, 49);
      case 9406:
         jjmatchedKind = 73;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x180L);
      case 9412:
         return jjStopAtPos(0, 51);
      case 9413:
         return jjStopAtPos(0, 47);
      case 9415:
         return jjStopAtPos(0, 26);
      case 9416:
         return jjStopAtPos(0, 50);
      case 9417:
         return jjStopAtPos(0, 19);
      case 9421:
         return jjStopAtPos(0, 46);
      case 9437:
         return jjStopAtPos(0, 82);
      case 9650:
         return jjStopAtPos(0, 8);
      case 9656:
         return jjStopAtPos(0, 7);
      case 9660:
         return jjStopAtPos(0, 9);
      case 9666:
         return jjStopAtPos(0, 6);
      case 9679:
         return jjStopAtPos(0, 55);
      case 9703:
         return jjStopAtPos(0, 21);
      case 9874:
         return jjStopAtPos(0, 25);
      case 9881:
         return jjStopAtPos(0, 104);
      case 9889:
         return jjStopAtPos(0, 103);
      case 9993:
         return jjStopAtPos(0, 23);
      case 9999:
         return jjStopAtPos(0, 24);
      case 10004:
         return jjStopAtPos(0, 41);
      case 10008:
         return jjStopAtPos(0, 42);
      case 10022:
         return jjStopAtPos(0, 48);
      case 10112:
         jjmatchedKind = 79;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x6000L);
      case 10140:
         return jjStopAtPos(0, 18);
      case 10214:
         return jjStopAtPos(0, 27);
      case 10514:
         return jjStopAtPos(0, 113);
      case 10515:
         return jjStopAtPos(0, 112);
      case 10521:
         return jjStopAtPos(0, 101);
      case 10522:
         return jjStopAtPos(0, 102);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private final int jjMoveStringLiteralDfa1_0(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 10:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStopAtPos(1, 37);
         break;
      case 37:
         if ((active1 & 0x8000000000000L) != 0L)
            return jjStopAtPos(1, 115);
         else if ((active1 & 0x20000000000000L) != 0L)
            return jjStopAtPos(1, 117);
         break;
      case 40:
         if ((active1 & 0x80L) != 0L)
            return jjStopAtPos(1, 71);
         else if ((active1 & 0x2000L) != 0L)
            return jjStopAtPos(1, 77);
         break;
      case 45:
         if ((active1 & 0x80000000000000L) != 0L)
            return jjStopAtPos(1, 119);
         break;
      case 58:
         if ((active1 & 0x100L) != 0L)
            return jjStopAtPos(1, 72);
         else if ((active1 & 0x4000L) != 0L)
            return jjStopAtPos(1, 78);
         break;
      case 61:
         if ((active1 & 0x200000000000000L) != 0L)
            return jjStopAtPos(1, 121);
         break;
      case 62:
         if ((active1 & 0x10000000000000L) != 0L)
            return jjStopAtPos(1, 116);
         else if ((active1 & 0x40000000000000L) != 0L)
            return jjStopAtPos(1, 118);
         else if ((active1 & 0x100000000000000L) != 0L)
            return jjStopAtPos(1, 120);
         break;
      case 172:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000000000000L, active1, 0xa00001L);
      case 182:
         if ((active1 & 0x100000000L) != 0L)
            return jjStopAtPos(1, 96);
         break;
      case 8263:
         if ((active0 & 0x4000000000000000L) != 0L)
            return jjStopAtPos(1, 62);
         else if ((active0 & 0x8000000000000000L) != 0L)
            return jjStopAtPos(1, 63);
         break;
      case 8702:
         if ((active1 & 0x80000000L) != 0L)
            return jjStopAtPos(1, 95);
         break;
      case 8704:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStopAtPos(1, 54);
         break;
      case 8707:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStopAtPos(1, 58);
         else if ((active0 & 0x800000000000000L) != 0L)
            return jjStopAtPos(1, 59);
         break;
      case 8709:
         if ((active1 & 0x2000000L) != 0L)
            return jjStopAtPos(1, 89);
         break;
      case 8712:
         if ((active1 & 0x8L) != 0L)
            return jjStopAtPos(1, 67);
         break;
      case 8984:
         if ((active1 & 0x1000000000L) != 0L)
            return jjStopAtPos(1, 100);
         break;
      case 9417:
         if ((active0 & 0x100000L) != 0L)
            return jjStopAtPos(1, 20);
         break;
      case 9437:
         if ((active1 & 0x80000L) != 0L)
            return jjStopAtPos(1, 83);
         else if ((active1 & 0x400000L) != 0L)
            return jjStopAtPos(1, 86);
         break;
      case 9679:
         if ((active0 & 0x100000000000000L) != 0L)
            return jjStopAtPos(1, 56);
         break;
      case 9703:
         if ((active0 & 0x400000L) != 0L)
            return jjStopAtPos(1, 22);
         break;
      case 10112:
         if ((active1 & 0x20000L) != 0L)
         {
            jjmatchedKind = 81;
            jjmatchedPos = 1;
         }
         else if ((active1 & 0x100000L) != 0L)
            return jjStopAtPos(1, 84);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x10000L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
private final int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1);
      return 2;
   }
   switch(curChar)
   {
      case 40:
         if ((active1 & 0x10000L) != 0L)
            return jjStopAtPos(2, 80);
         break;
      case 8263:
         if ((active1 & 0x1L) != 0L)
            return jjStopAtPos(2, 64);
         break;
      case 8707:
         if ((active0 & 0x1000000000000000L) != 0L)
            return jjStopAtPos(2, 60);
         break;
      case 9437:
         if ((active1 & 0x800000L) != 0L)
            return jjStopAtPos(2, 87);
         break;
      case 10112:
         if ((active1 & 0x200000L) != 0L)
            return jjStopAtPos(2, 85);
         break;
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1);
}
private final void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private final void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private final void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}
private final void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}
private final void jjCheckNAddStates(int start)
{
   jjCheckNAdd(jjnextStates[start]);
   jjCheckNAdd(jjnextStates[start + 1]);
}
static final long[] jjbitVec0 = {
   0x0L, 0x400L, 0x0L, 0x0L
};
static final long[] jjbitVec1 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec3 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec4 = {
   0x200L, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec5 = {
   0x100L, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec6 = {
   0x0L, 0x0L, 0x100000000000L, 0x0L
};
static final long[] jjbitVec7 = {
   0x10000000000L, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec8 = {
   0x0L, 0x0L, 0x8000000000L, 0x0L
};
private final int jjMoveNfa_0(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 16;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x1000018400000000L & l) != 0L)
                  {
                     if (kind > 123)
                        kind = 123;
                  }
                  else if ((0x100002200L & l) != 0L)
                  {
                     if (kind > 44)
                        kind = 44;
                     jjCheckNAdd(2);
                  }
                  else if (curChar == 47)
                     jjAddStates(0, 1);
                  break;
               case 1:
                  if (kind > 1)
                     kind = 1;
                  break;
               case 2:
                  if ((0x100002200L & l) == 0L)
                     break;
                  if (kind > 44)
                     kind = 44;
                  jjCheckNAdd(2);
                  break;
               case 7:
                  if ((0x100002200L & l) != 0L)
                     jjAddStates(2, 3);
                  break;
               case 9:
                  if ((0x100002200L & l) != 0L)
                     jjAddStates(4, 5);
                  break;
               case 11:
                  if ((0x1000018400000000L & l) != 0L && kind > 123)
                     kind = 123;
                  break;
               case 12:
                  if (curChar == 47)
                     jjAddStates(0, 1);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x800000008000000L & l) != 0L)
                  {
                     if (kind > 123)
                        kind = 123;
                  }
                  else if (curChar == 125)
                     jjAddStates(2, 3);
                  break;
               case 1:
                  if (kind > 1)
                     kind = 1;
                  break;
               case 6:
                  if (curChar == 125)
                     jjAddStates(2, 3);
                  break;
               case 10:
                  if (curChar == 123 && kind > 91)
                     kind = 91;
                  break;
               case 11:
                  if ((0x800000008000000L & l) != 0L && kind > 123)
                     kind = 123;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 13:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 69)
                        kind = 69;
                  }
                  if (jjCanMove_4(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 0:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 1;
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 68)
                        kind = 68;
                  }
                  if (jjCanMove_4(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 4;
                  if (jjCanMove_6(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 123)
                        kind = 123;
                  }
                  break;
               case 1:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2) && kind > 1)
                     kind = 1;
                  break;
               case 3:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2) && kind > 68)
                     kind = 68;
                  break;
               case 4:
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2) && kind > 68)
                     kind = 68;
                  break;
               case 5:
                  if (jjCanMove_4(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 8:
                  if (jjCanMove_5(hiByte, i1, i2, l1, l2))
                     jjAddStates(4, 5);
                  break;
               case 11:
                  if (jjCanMove_6(hiByte, i1, i2, l1, l2) && kind > 123)
                     kind = 123;
                  break;
               case 14:
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2) && kind > 69)
                     kind = 69;
                  break;
               case 15:
                  if (jjCanMove_4(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 16 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_2(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x8800000000000000L) != 0L || (active1 & 0x860b0000L) != 0L)
            return 2;
         if ((active1 & 0x2a0000000000000L) != 0L)
         {
            jjmatchedKind = 123;
            return -1;
         }
         if ((active0 & 0x5540000000000000L) != 0L || (active1 & 0x1100f00009L) != 0L)
            return 11;
         return -1;
      case 1:
         if ((active0 & 0x1000000000000000L) != 0L || (active1 & 0xa00001L) != 0L)
            return 12;
         if ((active1 & 0x2a0000000000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 123;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_2(int pos, long active0, long active1)
{
   return jjMoveNfa_2(jjStopStringLiteralDfa_2(pos, active0, active1), pos + 1);
}
private final int jjStartNfaWithStates_2(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_2(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_2()
{
   switch(curChar)
   {
      case 10:
         return jjStopAtPos(0, 45);
      case 37:
         return jjMoveStringLiteralDfa1_2(0x0L, 0x18000000000000L);
      case 45:
         return jjMoveStringLiteralDfa1_2(0x0L, 0x40000000000000L);
      case 47:
         return jjMoveStringLiteralDfa1_2(0x5540000000000000L, 0x1100f00009L);
      case 60:
         return jjMoveStringLiteralDfa1_2(0x0L, 0x2a0000000000000L);
      case 61:
         return jjMoveStringLiteralDfa1_2(0x0L, 0x100000000000000L);
      case 92:
         return jjStopAtPos(0, 122);
      case 172:
         jjmatchedKind = 90;
         return jjMoveStringLiteralDfa1_2(0x8800000000000000L, 0x820b0000L);
      case 182:
         return jjStopAtPos(0, 97);
      case 8214:
         return jjStopAtPos(0, 52);
      case 8230:
         jjmatchedKind = 39;
         return jjMoveStringLiteralDfa1_2(0x2000000000L, 0x0L);
      case 8263:
         return jjStopAtPos(0, 61);
      case 8693:
         return jjStopAtPos(0, 114);
      case 8702:
         return jjStopAtPos(0, 94);
      case 8704:
         return jjStopAtPos(0, 53);
      case 8707:
         return jjStopAtPos(0, 57);
      case 8709:
         return jjStopAtPos(0, 88);
      case 8712:
         return jjStopAtPos(0, 66);
      case 8719:
         return jjStopAtPos(0, 110);
      case 8721:
         return jjStopAtPos(0, 111);
      case 8743:
         return jjStopAtPos(0, 93);
      case 8744:
         return jjStopAtPos(0, 92);
      case 8746:
         return jjStopAtPos(0, 65);
      case 8801:
         return jjStopAtPos(0, 43);
      case 8853:
         return jjStopAtPos(0, 74);
      case 8854:
         return jjStopAtPos(0, 75);
      case 8857:
         return jjStopAtPos(0, 70);
      case 8859:
         return jjStopAtPos(0, 76);
      case 8942:
         return jjStopAtPos(0, 38);
      case 8960:
         return jjStopAtPos(0, 109);
      case 8983:
         return jjStopAtPos(0, 108);
      case 8984:
         return jjStopAtPos(0, 99);
      case 8986:
         return jjStopAtPos(0, 106);
      case 9022:
         return jjStopAtPos(0, 107);
      case 9094:
         return jjStopAtPos(0, 105);
      case 9166:
         return jjStopAtPos(0, 98);
      case 9216:
         return jjStopAtPos(0, 40);
      case 9403:
         return jjStopAtPos(0, 49);
      case 9406:
         jjmatchedKind = 73;
         return jjMoveStringLiteralDfa1_2(0x0L, 0x180L);
      case 9412:
         return jjStopAtPos(0, 51);
      case 9413:
         return jjStopAtPos(0, 47);
      case 9416:
         return jjStopAtPos(0, 50);
      case 9421:
         return jjStopAtPos(0, 46);
      case 9437:
         return jjStopAtPos(0, 82);
      case 9650:
         return jjStopAtPos(0, 35);
      case 9679:
         return jjStopAtPos(0, 55);
      case 9881:
         return jjStopAtPos(0, 104);
      case 9889:
         return jjStopAtPos(0, 103);
      case 10004:
         return jjStopAtPos(0, 41);
      case 10008:
         return jjStopAtPos(0, 42);
      case 10022:
         return jjStopAtPos(0, 48);
      case 10112:
         jjmatchedKind = 79;
         return jjMoveStringLiteralDfa1_2(0x0L, 0x6000L);
      case 10514:
         return jjStopAtPos(0, 113);
      case 10515:
         return jjStopAtPos(0, 112);
      case 10521:
         return jjStopAtPos(0, 101);
      case 10522:
         return jjStopAtPos(0, 102);
      default :
         return jjMoveNfa_2(1, 0);
   }
}
private final int jjMoveStringLiteralDfa1_2(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 10:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStopAtPos(1, 37);
         break;
      case 37:
         if ((active1 & 0x8000000000000L) != 0L)
            return jjStopAtPos(1, 115);
         else if ((active1 & 0x20000000000000L) != 0L)
            return jjStopAtPos(1, 117);
         break;
      case 40:
         if ((active1 & 0x80L) != 0L)
            return jjStopAtPos(1, 71);
         else if ((active1 & 0x2000L) != 0L)
            return jjStopAtPos(1, 77);
         break;
      case 45:
         if ((active1 & 0x80000000000000L) != 0L)
            return jjStopAtPos(1, 119);
         break;
      case 58:
         if ((active1 & 0x100L) != 0L)
            return jjStopAtPos(1, 72);
         else if ((active1 & 0x4000L) != 0L)
            return jjStopAtPos(1, 78);
         break;
      case 61:
         if ((active1 & 0x200000000000000L) != 0L)
            return jjStopAtPos(1, 121);
         break;
      case 62:
         if ((active1 & 0x10000000000000L) != 0L)
            return jjStopAtPos(1, 116);
         else if ((active1 & 0x40000000000000L) != 0L)
            return jjStopAtPos(1, 118);
         else if ((active1 & 0x100000000000000L) != 0L)
            return jjStopAtPos(1, 120);
         break;
      case 172:
         return jjMoveStringLiteralDfa2_2(active0, 0x1000000000000000L, active1, 0xa00001L);
      case 182:
         if ((active1 & 0x100000000L) != 0L)
            return jjStopAtPos(1, 96);
         break;
      case 8263:
         if ((active0 & 0x4000000000000000L) != 0L)
            return jjStopAtPos(1, 62);
         else if ((active0 & 0x8000000000000000L) != 0L)
            return jjStopAtPos(1, 63);
         break;
      case 8702:
         if ((active1 & 0x80000000L) != 0L)
            return jjStopAtPos(1, 95);
         break;
      case 8704:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStopAtPos(1, 54);
         break;
      case 8707:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStopAtPos(1, 58);
         else if ((active0 & 0x800000000000000L) != 0L)
            return jjStopAtPos(1, 59);
         break;
      case 8709:
         if ((active1 & 0x2000000L) != 0L)
            return jjStopAtPos(1, 89);
         break;
      case 8712:
         if ((active1 & 0x8L) != 0L)
            return jjStopAtPos(1, 67);
         break;
      case 8984:
         if ((active1 & 0x1000000000L) != 0L)
            return jjStopAtPos(1, 100);
         break;
      case 9437:
         if ((active1 & 0x80000L) != 0L)
            return jjStopAtPos(1, 83);
         else if ((active1 & 0x400000L) != 0L)
            return jjStopAtPos(1, 86);
         break;
      case 9679:
         if ((active0 & 0x100000000000000L) != 0L)
            return jjStopAtPos(1, 56);
         break;
      case 10112:
         if ((active1 & 0x20000L) != 0L)
         {
            jjmatchedKind = 81;
            jjmatchedPos = 1;
         }
         else if ((active1 & 0x100000L) != 0L)
            return jjStopAtPos(1, 84);
         return jjMoveStringLiteralDfa2_2(active0, 0L, active1, 0x10000L);
      default :
         break;
   }
   return jjStartNfa_2(0, active0, active1);
}
private final int jjMoveStringLiteralDfa2_2(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_2(0, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(1, active0, active1);
      return 2;
   }
   switch(curChar)
   {
      case 40:
         if ((active1 & 0x10000L) != 0L)
            return jjStopAtPos(2, 80);
         break;
      case 8263:
         if ((active1 & 0x1L) != 0L)
            return jjStopAtPos(2, 64);
         break;
      case 8707:
         if ((active0 & 0x1000000000000000L) != 0L)
            return jjStopAtPos(2, 60);
         break;
      case 9437:
         if ((active1 & 0x800000L) != 0L)
            return jjStopAtPos(2, 87);
         break;
      case 10112:
         if ((active1 & 0x200000L) != 0L)
            return jjStopAtPos(2, 85);
         break;
      default :
         break;
   }
   return jjStartNfa_2(1, active0, active1);
}
private final int jjMoveNfa_2(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 14;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((0x1000018400000000L & l) != 0L)
                  {
                     if (kind > 123)
                        kind = 123;
                  }
                  else if ((0x100002200L & l) != 0L)
                  {
                     if (kind > 44)
                        kind = 44;
                     jjCheckNAdd(0);
                  }
                  else if (curChar == 47)
                     jjAddStates(6, 7);
                  break;
               case 0:
                  if ((0x100002200L & l) == 0L)
                     break;
                  if (kind > 44)
                     kind = 44;
                  jjCheckNAdd(0);
                  break;
               case 5:
                  if ((0x100002200L & l) != 0L)
                     jjAddStates(8, 9);
                  break;
               case 7:
                  if ((0x100002200L & l) != 0L)
                     jjAddStates(2, 3);
                  break;
               case 9:
                  if ((0x1000018400000000L & l) != 0L)
                     kind = 123;
                  break;
               case 10:
                  if (curChar == 47)
                     jjAddStates(6, 7);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((0x800000008000000L & l) != 0L)
                  {
                     if (kind > 123)
                        kind = 123;
                  }
                  else if (curChar == 125)
                     jjAddStates(8, 9);
                  break;
               case 4:
                  if (curChar == 125)
                     jjAddStates(8, 9);
                  break;
               case 8:
                  if (curChar == 123 && kind > 91)
                     kind = 91;
                  break;
               case 9:
                  if ((0x800000008000000L & l) != 0L && kind > 123)
                     kind = 123;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 11:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 69)
                        kind = 69;
                  }
                  if (jjCanMove_4(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 1:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 68)
                        kind = 68;
                  }
                  if (jjCanMove_4(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 2;
                  if (jjCanMove_6(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 123)
                        kind = 123;
                  }
                  break;
               case 2:
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2) && kind > 68)
                     kind = 68;
                  break;
               case 3:
                  if (jjCanMove_4(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 6:
                  if (jjCanMove_5(hiByte, i1, i2, l1, l2))
                     jjAddStates(2, 3);
                  break;
               case 9:
                  if (jjCanMove_6(hiByte, i1, i2, l1, l2) && kind > 123)
                     kind = 123;
                  break;
               case 12:
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2) && kind > 69)
                     kind = 69;
                  break;
               case 13:
                  if (jjCanMove_4(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 14 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_3(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x8800000000000000L) != 0L || (active1 & 0x860b0000L) != 0L)
            return 2;
         if ((active1 & 0x2a0000000000000L) != 0L)
         {
            jjmatchedKind = 123;
            return -1;
         }
         if ((active0 & 0x5540000000000000L) != 0L || (active1 & 0x1100f00009L) != 0L)
            return 11;
         return -1;
      case 1:
         if ((active0 & 0x1000000000000000L) != 0L || (active1 & 0xa00001L) != 0L)
            return 12;
         if ((active1 & 0x2a0000000000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 123;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_3(int pos, long active0, long active1)
{
   return jjMoveNfa_3(jjStopStringLiteralDfa_3(pos, active0, active1), pos + 1);
}
private final int jjStartNfaWithStates_3(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_3(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_3()
{
   switch(curChar)
   {
      case 10:
         return jjStopAtPos(0, 45);
      case 37:
         return jjMoveStringLiteralDfa1_3(0x0L, 0x18000000000000L);
      case 45:
         return jjMoveStringLiteralDfa1_3(0x0L, 0x40000000000000L);
      case 47:
         return jjMoveStringLiteralDfa1_3(0x5540000000000000L, 0x1100f00009L);
      case 60:
         return jjMoveStringLiteralDfa1_3(0x0L, 0x2a0000000000000L);
      case 61:
         return jjMoveStringLiteralDfa1_3(0x0L, 0x100000000000000L);
      case 92:
         return jjStopAtPos(0, 122);
      case 172:
         jjmatchedKind = 90;
         return jjMoveStringLiteralDfa1_3(0x8800000000000000L, 0x820b0000L);
      case 182:
         return jjStopAtPos(0, 97);
      case 8214:
         return jjStopAtPos(0, 52);
      case 8230:
         jjmatchedKind = 39;
         return jjMoveStringLiteralDfa1_3(0x2000000000L, 0x0L);
      case 8263:
         return jjStopAtPos(0, 61);
      case 8693:
         return jjStopAtPos(0, 114);
      case 8702:
         return jjStopAtPos(0, 94);
      case 8704:
         return jjStopAtPos(0, 53);
      case 8707:
         return jjStopAtPos(0, 57);
      case 8709:
         return jjStopAtPos(0, 88);
      case 8712:
         return jjStopAtPos(0, 66);
      case 8719:
         return jjStopAtPos(0, 110);
      case 8721:
         return jjStopAtPos(0, 111);
      case 8743:
         return jjStopAtPos(0, 93);
      case 8744:
         return jjStopAtPos(0, 92);
      case 8746:
         return jjStopAtPos(0, 65);
      case 8801:
         return jjStopAtPos(0, 43);
      case 8853:
         return jjStopAtPos(0, 74);
      case 8854:
         return jjStopAtPos(0, 75);
      case 8857:
         return jjStopAtPos(0, 70);
      case 8859:
         return jjStopAtPos(0, 76);
      case 8942:
         return jjStopAtPos(0, 38);
      case 8960:
         return jjStopAtPos(0, 109);
      case 8983:
         return jjStopAtPos(0, 108);
      case 8984:
         return jjStopAtPos(0, 99);
      case 8986:
         return jjStopAtPos(0, 106);
      case 9022:
         return jjStopAtPos(0, 107);
      case 9094:
         return jjStopAtPos(0, 105);
      case 9166:
         return jjStopAtPos(0, 98);
      case 9216:
         return jjStopAtPos(0, 40);
      case 9403:
         return jjStopAtPos(0, 49);
      case 9406:
         jjmatchedKind = 73;
         return jjMoveStringLiteralDfa1_3(0x0L, 0x180L);
      case 9412:
         return jjStopAtPos(0, 51);
      case 9413:
         return jjStopAtPos(0, 47);
      case 9416:
         return jjStopAtPos(0, 50);
      case 9421:
         return jjStopAtPos(0, 46);
      case 9437:
         return jjStopAtPos(0, 82);
      case 9660:
         return jjStopAtPos(0, 36);
      case 9679:
         return jjStopAtPos(0, 55);
      case 9881:
         return jjStopAtPos(0, 104);
      case 9889:
         return jjStopAtPos(0, 103);
      case 10004:
         return jjStopAtPos(0, 41);
      case 10008:
         return jjStopAtPos(0, 42);
      case 10022:
         return jjStopAtPos(0, 48);
      case 10112:
         jjmatchedKind = 79;
         return jjMoveStringLiteralDfa1_3(0x0L, 0x6000L);
      case 10514:
         return jjStopAtPos(0, 113);
      case 10515:
         return jjStopAtPos(0, 112);
      case 10521:
         return jjStopAtPos(0, 101);
      case 10522:
         return jjStopAtPos(0, 102);
      default :
         return jjMoveNfa_3(1, 0);
   }
}
private final int jjMoveStringLiteralDfa1_3(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 10:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStopAtPos(1, 37);
         break;
      case 37:
         if ((active1 & 0x8000000000000L) != 0L)
            return jjStopAtPos(1, 115);
         else if ((active1 & 0x20000000000000L) != 0L)
            return jjStopAtPos(1, 117);
         break;
      case 40:
         if ((active1 & 0x80L) != 0L)
            return jjStopAtPos(1, 71);
         else if ((active1 & 0x2000L) != 0L)
            return jjStopAtPos(1, 77);
         break;
      case 45:
         if ((active1 & 0x80000000000000L) != 0L)
            return jjStopAtPos(1, 119);
         break;
      case 58:
         if ((active1 & 0x100L) != 0L)
            return jjStopAtPos(1, 72);
         else if ((active1 & 0x4000L) != 0L)
            return jjStopAtPos(1, 78);
         break;
      case 61:
         if ((active1 & 0x200000000000000L) != 0L)
            return jjStopAtPos(1, 121);
         break;
      case 62:
         if ((active1 & 0x10000000000000L) != 0L)
            return jjStopAtPos(1, 116);
         else if ((active1 & 0x40000000000000L) != 0L)
            return jjStopAtPos(1, 118);
         else if ((active1 & 0x100000000000000L) != 0L)
            return jjStopAtPos(1, 120);
         break;
      case 172:
         return jjMoveStringLiteralDfa2_3(active0, 0x1000000000000000L, active1, 0xa00001L);
      case 182:
         if ((active1 & 0x100000000L) != 0L)
            return jjStopAtPos(1, 96);
         break;
      case 8263:
         if ((active0 & 0x4000000000000000L) != 0L)
            return jjStopAtPos(1, 62);
         else if ((active0 & 0x8000000000000000L) != 0L)
            return jjStopAtPos(1, 63);
         break;
      case 8702:
         if ((active1 & 0x80000000L) != 0L)
            return jjStopAtPos(1, 95);
         break;
      case 8704:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStopAtPos(1, 54);
         break;
      case 8707:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStopAtPos(1, 58);
         else if ((active0 & 0x800000000000000L) != 0L)
            return jjStopAtPos(1, 59);
         break;
      case 8709:
         if ((active1 & 0x2000000L) != 0L)
            return jjStopAtPos(1, 89);
         break;
      case 8712:
         if ((active1 & 0x8L) != 0L)
            return jjStopAtPos(1, 67);
         break;
      case 8984:
         if ((active1 & 0x1000000000L) != 0L)
            return jjStopAtPos(1, 100);
         break;
      case 9437:
         if ((active1 & 0x80000L) != 0L)
            return jjStopAtPos(1, 83);
         else if ((active1 & 0x400000L) != 0L)
            return jjStopAtPos(1, 86);
         break;
      case 9679:
         if ((active0 & 0x100000000000000L) != 0L)
            return jjStopAtPos(1, 56);
         break;
      case 10112:
         if ((active1 & 0x20000L) != 0L)
         {
            jjmatchedKind = 81;
            jjmatchedPos = 1;
         }
         else if ((active1 & 0x100000L) != 0L)
            return jjStopAtPos(1, 84);
         return jjMoveStringLiteralDfa2_3(active0, 0L, active1, 0x10000L);
      default :
         break;
   }
   return jjStartNfa_3(0, active0, active1);
}
private final int jjMoveStringLiteralDfa2_3(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_3(0, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(1, active0, active1);
      return 2;
   }
   switch(curChar)
   {
      case 40:
         if ((active1 & 0x10000L) != 0L)
            return jjStopAtPos(2, 80);
         break;
      case 8263:
         if ((active1 & 0x1L) != 0L)
            return jjStopAtPos(2, 64);
         break;
      case 8707:
         if ((active0 & 0x1000000000000000L) != 0L)
            return jjStopAtPos(2, 60);
         break;
      case 9437:
         if ((active1 & 0x800000L) != 0L)
            return jjStopAtPos(2, 87);
         break;
      case 10112:
         if ((active1 & 0x200000L) != 0L)
            return jjStopAtPos(2, 85);
         break;
      default :
         break;
   }
   return jjStartNfa_3(1, active0, active1);
}
private final int jjMoveNfa_3(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 14;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((0x1000018400000000L & l) != 0L)
                  {
                     if (kind > 123)
                        kind = 123;
                  }
                  else if ((0x100002200L & l) != 0L)
                  {
                     if (kind > 44)
                        kind = 44;
                     jjCheckNAdd(0);
                  }
                  else if (curChar == 47)
                     jjAddStates(6, 7);
                  break;
               case 0:
                  if ((0x100002200L & l) == 0L)
                     break;
                  if (kind > 44)
                     kind = 44;
                  jjCheckNAdd(0);
                  break;
               case 5:
                  if ((0x100002200L & l) != 0L)
                     jjAddStates(8, 9);
                  break;
               case 7:
                  if ((0x100002200L & l) != 0L)
                     jjAddStates(2, 3);
                  break;
               case 9:
                  if ((0x1000018400000000L & l) != 0L)
                     kind = 123;
                  break;
               case 10:
                  if (curChar == 47)
                     jjAddStates(6, 7);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((0x800000008000000L & l) != 0L)
                  {
                     if (kind > 123)
                        kind = 123;
                  }
                  else if (curChar == 125)
                     jjAddStates(8, 9);
                  break;
               case 4:
                  if (curChar == 125)
                     jjAddStates(8, 9);
                  break;
               case 8:
                  if (curChar == 123 && kind > 91)
                     kind = 91;
                  break;
               case 9:
                  if ((0x800000008000000L & l) != 0L && kind > 123)
                     kind = 123;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 11:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 69)
                        kind = 69;
                  }
                  if (jjCanMove_4(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 1:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 68)
                        kind = 68;
                  }
                  if (jjCanMove_4(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 2;
                  if (jjCanMove_6(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 123)
                        kind = 123;
                  }
                  break;
               case 2:
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2) && kind > 68)
                     kind = 68;
                  break;
               case 3:
                  if (jjCanMove_4(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 6:
                  if (jjCanMove_5(hiByte, i1, i2, l1, l2))
                     jjAddStates(2, 3);
                  break;
               case 9:
                  if (jjCanMove_6(hiByte, i1, i2, l1, l2) && kind > 123)
                     kind = 123;
                  break;
               case 12:
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2) && kind > 69)
                     kind = 69;
                  break;
               case 13:
                  if (jjCanMove_4(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 14 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjMoveStringLiteralDfa0_1()
{
   switch(curChar)
   {
      case 60:
         return jjStopAtPos(0, 28);
      case 62:
         return jjStopAtPos(0, 29);
      case 91:
         return jjStopAtPos(0, 30);
      case 93:
         return jjStopAtPos(0, 31);
      case 750:
         return jjStopAtPos(0, 32);
      case 10215:
         return jjStopAtPos(0, 33);
      default :
         return 1;
   }
}
static final int[] jjnextStates = {
   13, 15, 7, 8, 9, 10, 11, 13, 5, 6, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 36:
         return ((jjbitVec0[i2] & l2) != 0L);
      default : 
         return false;
   }
}
private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec3[i2] & l2) != 0L);
      default : 
         if ((jjbitVec1[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_2(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 34:
         return ((jjbitVec4[i2] & l2) != 0L);
      default : 
         return false;
   }
}
private static final boolean jjCanMove_3(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 34:
         return ((jjbitVec5[i2] & l2) != 0L);
      default : 
         return false;
   }
}
private static final boolean jjCanMove_4(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec6[i2] & l2) != 0L);
      default : 
         return false;
   }
}
private static final boolean jjCanMove_5(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 34:
         return ((jjbitVec7[i2] & l2) != 0L);
      default : 
         return false;
   }
}
private static final boolean jjCanMove_6(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec8[i2] & l2) != 0L);
      default : 
         return false;
   }
}
public static final String[] jjstrLiteralImages = {
"", null, "\253", "\273", "\u22b0", "\u22b1", "\u25c2", "\u25b8", "\u25b2", 
"\u25bc", "\u228f", "\u2290", "\u2264", "\u2265", "\u2266", "\u2267", "\u22d6", 
"\u22d7", "\u279c", "\u24c9", "\57\u24c9", "\u25e7", "\57\u25e7", "\u2709", "\u270f", 
"\u2692", "\u24c7", "\u27e6", "\74", "\76", "\133", "\135", "\u02ee", "\u27e7", null, 
"\u25b2", "\u25bc", "\u2026\12", "\u22ee", "\u2026", "\u2400", "\u2714", "\u2718", 
"\u2261", null, "\12", "\u24cd", "\u24c5", "\u2726", "\u24bb", "\u24c8", "\u24c4", 
"\u2016", "\u2200", "\57\u2200", "\u25cf", "\57\u25cf", "\u2203", "\57\u2203", 
"\254\u2203", "\57\254\u2203", "\u2047", "\57\u2047", "\254\u2047", "\57\254\u2047", 
"\u222a", "\u2208", "\57\u2208", null, null, "\u2299", "\u24be\50", "\u24be\72", 
"\u24be", "\u2295", "\u2296", "\u229b", "\u2780\50", "\u2780\72", "\u2780", 
"\254\u2780\50", "\254\u2780", "\u24dd", "\254\u24dd", "\57\u2780", "\57\254\u2780", 
"\57\u24dd", "\57\254\u24dd", "\u2205", "\254\u2205", "\254", null, "\u2228", "\u2227", 
"\u21fe", "\254\u21fe", "\57\266", "\266", "\u23ce", "\u2318", "\57\u2318", "\u2919", 
"\u291a", "\u26a1", "\u2699", "\u2386", "\u231a", "\u233e", "\u2317", "\u2300", 
"\u220f", "\u2211", "\u2913", "\u2912", "\u21f5", "\45\45", "\45\76", "\74\45", 
"\55\76", "\74\55", "\75\76", "\74\75", "\134", null, null, };
public static final String[] lexStateNames = {
   "DEFAULT", 
   "IN_EXPR", 
   "IN_CLSLVL", 
   "IN_FLLVL", 
};
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, -1, 2, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, 1, -1, -1, -1, -1, -1, 0, -1, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[16];
private final int[] jjstateSet = new int[32];
protected char curChar;
public CUS2ASCIITokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}
public CUS2ASCIITokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private final void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 16; i-- > 0;)
      jjrounds[i] = 0x80000000;
}
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}
public void SwitchTo(int lexState)
{
   if (lexState >= 4 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   Token t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   String im = jjstrLiteralImages[jjmatchedKind];
   t.image = (im == null) ? input_stream.GetImage() : im;
   t.beginLine = input_stream.getBeginLine();
   t.beginColumn = input_stream.getBeginColumn();
   t.endLine = input_stream.getEndLine();
   t.endColumn = input_stream.getEndColumn();
   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

public Token getNextToken() 
{
  int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   switch(curLexState)
   {
     case 0:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_0();
       if (jjmatchedPos == 0 && jjmatchedKind > 124)
       {
          jjmatchedKind = 124;
       }
       break;
     case 1:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_1();
       if (jjmatchedPos == 0 && jjmatchedKind > 34)
       {
          jjmatchedKind = 34;
       }
       break;
     case 2:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_2();
       if (jjmatchedPos == 0 && jjmatchedKind > 124)
       {
          jjmatchedKind = 124;
       }
       break;
     case 3:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_3();
       if (jjmatchedPos == 0 && jjmatchedKind > 124)
       {
          jjmatchedKind = 124;
       }
       break;
   }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
           matchedToken = jjFillToken();
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

}
