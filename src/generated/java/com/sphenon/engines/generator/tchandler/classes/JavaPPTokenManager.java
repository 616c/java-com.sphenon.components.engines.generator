/* Generated By:JavaCC: Do not edit this line. JavaPPTokenManager.java */

/****************************************************************************
  Copyright 2001-2018 Sphenon GmbH

  Licensed under the Apache License, Version 2.0 (the "License"); you may not
  use this file except in compliance with the License. You may obtain a copy
  of the License at http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
  License for the specific language governing permissions and limitations
  under the License.
*****************************************************************************/
package com.sphenon.engines.generator.tchandler.classes;
import com.sphenon.basics.context.*;
import com.sphenon.engines.generator.*;
import com.sphenon.engines.generator.tom.*;
import com.sphenon.engines.generator.returncodes.*;
import com.sphenon.engines.generator.tchandler.*;
import java.io.Reader;
import java.io.Writer;
import java.io.IOException;
import java.util.Vector;

public class JavaPPTokenManager implements JavaPPConstants
{
  public  java.io.PrintStream debugStream = System.out;
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x7fc0000000L) != 0L)
            return 23;
         if ((active0 & 0x400000cL) != 0L)
            return 27;
         if ((active0 & 0x400L) != 0L)
         {
            jjmatchedKind = 11;
            return 20;
         }
         return -1;
      case 1:
         if ((active0 & 0x7fc0000000L) != 0L)
            return 24;
         if ((active0 & 0x400L) != 0L)
            return 20;
         return -1;
      case 2:
         if ((active0 & 0x7fc0000000L) != 0L)
            return 25;
         return -1;
      case 3:
         if ((active0 & 0x7fc0000000L) != 0L)
            return 25;
         return -1;
      case 4:
         if ((active0 & 0x7fc0000000L) != 0L)
            return 25;
         return -1;
      case 5:
         if ((active0 & 0x77c0000000L) != 0L)
            return 25;
         if ((active0 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 40;
            jjmatchedPos = 5;
            return -1;
         }
         return -1;
      case 6:
         if ((active0 & 0x7680000000L) != 0L)
            return 25;
         if ((active0 & 0x800000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 40;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0x140000000L) != 0L)
         {
            jjmatchedKind = 40;
            jjmatchedPos = 6;
            return -1;
         }
         return -1;
      case 7:
         if ((active0 & 0x7680000000L) != 0L)
            return 25;
         if ((active0 & 0x140000000L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 40;
               jjmatchedPos = 6;
            }
            return -1;
         }
         return -1;
      case 8:
         if ((active0 & 0x7600000000L) != 0L)
            return 25;
         if ((active0 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 40;
            jjmatchedPos = 8;
            return -1;
         }
         return -1;
      case 9:
         if ((active0 & 0x7600000000L) != 0L)
         {
            jjmatchedKind = 40;
            jjmatchedPos = 9;
            return -1;
         }
         if ((active0 & 0x80000000L) != 0L)
         {
            if (jjmatchedPos < 8)
            {
               jjmatchedKind = 40;
               jjmatchedPos = 8;
            }
            return -1;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
private final int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private final int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 35:
         return jjMoveStringLiteralDfa1_0(0x7fc0000000L);
      case 37:
         return jjMoveStringLiteralDfa1_0(0x4000L);
      case 40:
         return jjStopAtPos(0, 17);
      case 41:
         jjmatchedKind = 18;
         return jjMoveStringLiteralDfa1_0(0x10000L);
      case 44:
         return jjStopAtPos(0, 28);
      case 45:
         jjmatchedKind = 29;
         return jjMoveStringLiteralDfa1_0(0x8000L);
      case 46:
         return jjStopAtPos(0, 25);
      case 47:
         jjmatchedKind = 26;
         return jjMoveStringLiteralDfa1_0(0xcL);
      case 58:
         jjmatchedKind = 27;
         return jjMoveStringLiteralDfa1_0(0x1000L);
      case 60:
         return jjStopAtPos(0, 23);
      case 62:
         return jjStopAtPos(0, 24);
      case 91:
         return jjStopAtPos(0, 21);
      case 93:
         return jjStopAtPos(0, 22);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x400L);
      case 123:
         jjmatchedKind = 19;
         return jjMoveStringLiteralDfa1_0(0x2000L);
      case 125:
         return jjStopAtPos(0, 20);
      default :
         return jjMoveNfa_0(1, 0);
   }
}
private final int jjMoveStringLiteralDfa1_0(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 37:
         if ((active0 & 0x4000L) != 0L)
            return jjStopAtPos(1, 14);
         break;
      case 42:
         if ((active0 & 0x8L) != 0L)
            return jjStopAtPos(1, 3);
         else if ((active0 & 0x2000L) != 0L)
            return jjStopAtPos(1, 13);
         break;
      case 45:
         return jjMoveStringLiteralDfa2_0(active0, 0x18000L);
      case 47:
         if ((active0 & 0x4L) != 0L)
            return jjStopAtPos(1, 2);
         break;
      case 58:
         if ((active0 & 0x1000L) != 0L)
            return jjStopAtPos(1, 12);
         break;
      case 102:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(1, 10, 20);
         break;
      case 123:
         return jjMoveStringLiteralDfa2_0(active0, 0x7fc0000000L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0);
}
private final int jjMoveStringLiteralDfa2_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 40:
         if ((active0 & 0x8000L) != 0L)
            return jjStopAtPos(2, 15);
         break;
      case 45:
         if ((active0 & 0x10000L) != 0L)
            return jjStopAtPos(2, 16);
         break;
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000000L);
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000000L);
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0x3000000000L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000000L);
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000000L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x900000000L);
      case 116:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000000L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0);
}
private final int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000000L);
      case 101:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000000L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x1140000000L);
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0x80000000L);
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000000L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000000L);
      case 118:
         return jjMoveStringLiteralDfa4_0(active0, 0x200000000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0);
}
private final int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa5_0(active0, 0x200000000L);
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0x840000000L);
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000000L);
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x400000000L);
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x80000000L);
      case 118:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000000L);
      case 120:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000000L);
      case 122:
         return jjMoveStringLiteralDfa5_0(active0, 0x100000000L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0);
}
private final int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 100:
         return jjMoveStringLiteralDfa6_0(active0, 0x400000000L);
      case 101:
         return jjMoveStringLiteralDfa6_0(active0, 0x4140000000L);
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x3000000000L);
      case 109:
         return jjMoveStringLiteralDfa6_0(active0, 0x80000000L);
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0x200000000L);
      case 125:
         return jjMoveStringLiteralDfa6_0(active0, 0x800000000L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0);
}
private final int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0);
      return 6;
   }
   switch(curChar)
   {
      case 40:
         if ((active0 & 0x800000000L) != 0L)
            return jjStopAtPos(6, 35);
         break;
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x280000000L);
      case 109:
         return jjMoveStringLiteralDfa7_0(active0, 0x3000000000L);
      case 114:
         return jjMoveStringLiteralDfa7_0(active0, 0x4000000000L);
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x400000000L);
      case 125:
         return jjMoveStringLiteralDfa7_0(active0, 0x140000000L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0);
}
private final int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0);
      return 7;
   }
   switch(curChar)
   {
      case 40:
         if ((active0 & 0x40000000L) != 0L)
            return jjStopAtPos(7, 30);
         else if ((active0 & 0x100000000L) != 0L)
            return jjStopAtPos(7, 32);
         break;
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0x400000000L);
      case 103:
         return jjMoveStringLiteralDfa8_0(active0, 0x200000000L);
      case 115:
         return jjMoveStringLiteralDfa8_0(active0, 0x4000000000L);
      case 116:
         return jjMoveStringLiteralDfa8_0(active0, 0x80000000L);
      case 117:
         return jjMoveStringLiteralDfa8_0(active0, 0x3000000000L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0);
}
private final int jjMoveStringLiteralDfa8_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0);
      return 8;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa9_0(active0, 0x4200000000L);
      case 109:
         return jjMoveStringLiteralDfa9_0(active0, 0x3000000000L);
      case 116:
         return jjMoveStringLiteralDfa9_0(active0, 0x400000000L);
      case 125:
         return jjMoveStringLiteralDfa9_0(active0, 0x80000000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0);
}
private final int jjMoveStringLiteralDfa9_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0);
      return 9;
   }
   switch(curChar)
   {
      case 40:
         if ((active0 & 0x80000000L) != 0L)
            return jjStopAtPos(9, 31);
         break;
      case 125:
         return jjMoveStringLiteralDfa10_0(active0, 0x7600000000L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0);
}
private final int jjMoveStringLiteralDfa10_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0);
      return 10;
   }
   switch(curChar)
   {
      case 40:
         if ((active0 & 0x200000000L) != 0L)
            return jjStopAtPos(10, 33);
         else if ((active0 & 0x400000000L) != 0L)
            return jjStopAtPos(10, 34);
         else if ((active0 & 0x1000000000L) != 0L)
            return jjStopAtPos(10, 36);
         else if ((active0 & 0x2000000000L) != 0L)
            return jjStopAtPos(10, 37);
         else if ((active0 & 0x4000000000L) != 0L)
            return jjStopAtPos(10, 38);
         break;
      default :
         break;
   }
   return jjStartNfa_0(9, active0);
}
private final void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private final void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private final void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}
private final void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}
private final void jjCheckNAddStates(int start)
{
   jjCheckNAdd(jjnextStates[start]);
   jjCheckNAdd(jjnextStates[start + 1]);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private final int jjMoveNfa_0(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 33;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 27:
                  if (curChar == 35)
                     jjstateSet[jjnewStateCnt++] = 30;
                  if (curChar == 35)
                     jjCheckNAdd(28);
                  break;
               case 23:
               case 22:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 39)
                     kind = 39;
                  jjCheckNAdd(22);
                  break;
               case 1:
                  if ((0x100003600L & l) != 0L)
                  {
                     if (kind > 1)
                        kind = 1;
                     jjCheckNAdd(0);
                  }
                  else if (curChar == 47)
                     jjAddStates(0, 1);
                  else if (curChar == 35)
                     jjCheckNAddTwoStates(22, 23);
                  else if (curChar == 34)
                     jjCheckNAddStates(2, 4);
                  else if (curChar == 39)
                     jjAddStates(5, 6);
                  break;
               case 25:
               case 24:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(24, 25);
                  break;
               case 0:
                  if ((0x100003600L & l) == 0L)
                     break;
                  if (kind > 1)
                     kind = 1;
                  jjCheckNAdd(0);
                  break;
               case 2:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     jjCheckNAdd(3);
                  break;
               case 3:
                  if (curChar == 39 && kind > 8)
                     kind = 8;
                  break;
               case 5:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAdd(3);
                  break;
               case 6:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(7, 3);
                  break;
               case 7:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(3);
                  break;
               case 8:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 9:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(7);
                  break;
               case 10:
                  if (curChar == 34)
                     jjCheckNAddStates(2, 4);
                  break;
               case 11:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(2, 4);
                  break;
               case 13:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(2, 4);
                  break;
               case 14:
                  if (curChar == 34 && kind > 9)
                     kind = 9;
                  break;
               case 15:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(7, 10);
                  break;
               case 16:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(2, 4);
                  break;
               case 17:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 18:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(16);
                  break;
               case 20:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 11)
                     kind = 11;
                  jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 21:
                  if (curChar == 35)
                     jjCheckNAddTwoStates(22, 23);
                  break;
               case 26:
                  if (curChar == 47)
                     jjAddStates(0, 1);
                  break;
               case 28:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 41)
                     kind = 41;
                  jjCheckNAdd(28);
                  break;
               case 29:
                  if (curChar == 35)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 31:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjAddStates(11, 12);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 23:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 39)
                        kind = 39;
                     jjCheckNAdd(22);
                  }
                  else if (curChar == 123)
                     jjCheckNAdd(24);
                  break;
               case 1:
               case 20:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 11)
                     kind = 11;
                  jjCheckNAdd(20);
                  break;
               case 25:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(24, 25);
                  else if (curChar == 125)
                  {
                     if (kind > 40)
                        kind = 40;
                  }
                  break;
               case 2:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAdd(3);
                  break;
               case 4:
                  if (curChar == 92)
                     jjAddStates(13, 15);
                  break;
               case 5:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAdd(3);
                  break;
               case 11:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(2, 4);
                  break;
               case 12:
                  if (curChar == 92)
                     jjAddStates(16, 18);
                  break;
               case 13:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAddStates(2, 4);
                  break;
               case 22:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 39)
                     kind = 39;
                  jjCheckNAdd(22);
                  break;
               case 24:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(24, 25);
                  break;
               case 28:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 41)
                     kind = 41;
                  jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 30:
                  if (curChar == 123)
                     jjCheckNAdd(31);
                  break;
               case 31:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(31, 32);
                  break;
               case 32:
                  if (curChar == 125 && kind > 42)
                     kind = 42;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 2:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 11:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(2, 4);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 33 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_4(int pos, long active0)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_4(int pos, long active0)
{
   return jjMoveNfa_4(jjStopStringLiteralDfa_4(pos, active0), pos + 1);
}
private final int jjStartNfaWithStates_4(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_4(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_4()
{
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_4(0x800000000000000L);
      case 60:
         return jjStopAtPos(0, 53);
      case 62:
         return jjStopAtPos(0, 54);
      case 91:
         return jjStopAtPos(0, 55);
      case 93:
         return jjStopAtPos(0, 56);
      default :
         return jjMoveNfa_4(0, 0);
   }
}
private final int jjMoveStringLiteralDfa1_4(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_4(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 125:
         if ((active0 & 0x800000000000000L) != 0L)
            return jjStopAtPos(1, 59);
         break;
      default :
         break;
   }
   return jjStartNfa_4(0, active0);
}
private final int jjMoveNfa_4(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 5;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 58)
                     kind = 58;
                  jjCheckNAddTwoStates(1, 2);
                  break;
               case 2:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 4:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 58)
                     kind = 58;
                  jjCheckNAddTwoStates(2, 4);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 1:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 58)
                     kind = 58;
                  jjCheckNAddTwoStates(1, 2);
                  break;
               case 3:
               case 4:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 58)
                     kind = 58;
                  jjCheckNAddTwoStates(2, 4);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 5 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_3(int pos, long active0)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x8000000000000L) != 0L)
            return 13;
         return -1;
      case 1:
         if ((active0 & 0x8000000000000L) != 0L)
            return 14;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_3(int pos, long active0)
{
   return jjMoveNfa_3(jjStopStringLiteralDfa_3(pos, active0), pos + 1);
}
private final int jjStartNfaWithStates_3(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_3(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_3()
{
   switch(curChar)
   {
      case 40:
         return jjMoveStringLiteralDfa1_3(0x8000000000000L);
      case 60:
         return jjStopAtPos(0, 46);
      case 62:
         return jjStopAtPos(0, 47);
      case 91:
         return jjStopAtPos(0, 44);
      case 93:
         return jjStopAtPos(0, 45);
      default :
         return jjMoveNfa_3(0, 0);
   }
}
private final int jjMoveStringLiteralDfa1_3(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa2_3(active0, 0x8000000000000L);
      default :
         break;
   }
   return jjStartNfa_3(0, active0);
}
private final int jjMoveStringLiteralDfa2_3(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_3(0, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 41:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStopAtPos(2, 51);
         break;
      default :
         break;
   }
   return jjStartNfa_3(1, active0);
}
static final long[] jjbitVec3 = {
   0x0L, 0x0L, 0x8000000000L, 0x0L
};
static final long[] jjbitVec4 = {
   0x0L, 0x0L, 0xffffff7fffffffffL, 0xffffffffffffffffL
};
private final int jjMoveNfa_3(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 21;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x100003600L & l) != 0L)
                  {
                     if (kind > 50)
                        kind = 50;
                     jjCheckNAdd(5);
                  }
                  else if (curChar == 40)
                     jjCheckNAdd(13);
                  else if (curChar == 39)
                     jjCheckNAdd(10);
                  else if (curChar == 34)
                     jjCheckNAdd(7);
                  break;
               case 14:
                  if ((0xfffffdffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(13, 14);
                  else if (curChar == 41)
                  {
                     if (kind > 52)
                        kind = 52;
                  }
                  break;
               case 1:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 49)
                     kind = 49;
                  jjCheckNAddTwoStates(1, 2);
                  break;
               case 2:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 4:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 49)
                     kind = 49;
                  jjCheckNAddTwoStates(2, 4);
                  break;
               case 5:
                  if ((0x100003600L & l) == 0L)
                     break;
                  if (kind > 50)
                     kind = 50;
                  jjCheckNAdd(5);
                  break;
               case 6:
                  if (curChar == 34)
                     jjCheckNAdd(7);
                  break;
               case 7:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(7, 8);
                  break;
               case 8:
                  if (curChar == 34 && kind > 52)
                     kind = 52;
                  break;
               case 9:
                  if (curChar == 39)
                     jjCheckNAdd(10);
                  break;
               case 10:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(10, 11);
                  break;
               case 11:
                  if (curChar == 39 && kind > 52)
                     kind = 52;
                  break;
               case 12:
                  if (curChar == 40)
                     jjCheckNAdd(13);
                  break;
               case 13:
                  if ((0xfffffdffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(13, 14);
                  break;
               case 16:
                  jjAddStates(19, 20);
                  break;
               case 19:
                  jjAddStates(21, 22);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 49)
                        kind = 49;
                     jjCheckNAddTwoStates(1, 2);
                  }
                  else if (curChar == 123)
                     jjCheckNAdd(16);
                  break;
               case 14:
               case 13:
                  jjCheckNAddTwoStates(13, 14);
                  break;
               case 1:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 49)
                     kind = 49;
                  jjCheckNAddTwoStates(1, 2);
                  break;
               case 3:
               case 4:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 49)
                     kind = 49;
                  jjCheckNAddTwoStates(2, 4);
                  break;
               case 7:
                  jjAddStates(23, 24);
                  break;
               case 10:
                  jjAddStates(25, 26);
                  break;
               case 15:
                  if (curChar == 123)
                     jjCheckNAdd(16);
                  break;
               case 16:
                  if ((0xdfffffffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(16, 17);
                  break;
               case 17:
                  if (curChar == 125 && kind > 52)
                     kind = 52;
                  break;
               case 19:
                  jjAddStates(21, 22);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAdd(19);
                  break;
               case 14:
               case 13:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(13, 14);
                  break;
               case 7:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(23, 24);
                  break;
               case 10:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(25, 26);
                  break;
               case 16:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(19, 20);
                  break;
               case 19:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(19, 20);
                  break;
               case 20:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2) && kind > 52)
                     kind = 52;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 21 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjMoveStringLiteralDfa0_1()
{
   return jjMoveNfa_1(0, 0);
}
private final int jjMoveNfa_1(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 3;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x2400L & l) != 0L)
                  {
                     if (kind > 4)
                        kind = 4;
                  }
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if (curChar == 10 && kind > 4)
                     kind = 4;
                  break;
               case 2:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjMoveStringLiteralDfa0_2()
{
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_2(0x40L);
      default :
         return 1;
   }
}
private final int jjMoveStringLiteralDfa1_2(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x40L) != 0L)
            return jjStopAtPos(1, 6);
         break;
      default :
         return 2;
   }
   return 2;
}
static final int[] jjnextStates = {
   27, 29, 11, 12, 14, 2, 4, 11, 12, 16, 14, 31, 32, 5, 6, 8, 
   13, 15, 17, 16, 17, 19, 20, 7, 8, 10, 11, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default : 
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec3[i2] & l2) != 0L);
      default : 
         return false;
   }
}
private static final boolean jjCanMove_2(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec4[i2] & l2) != 0L);
      default : 
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}
public static final String[] jjstrLiteralImages = {
"", null, "\57\57", "\57\52", null, null, "\52\57", null, null, null, 
"\151\146", null, "\72\72", "\173\52", "\45\45", "\55\55\50", "\51\55\55", "\50", "\51", 
"\173", "\175", "\133", "\135", "\74", "\76", "\56", "\57", "\72", "\54", "\55", 
"\43\173\164\151\155\145\175\50", "\43\173\146\157\162\155\141\164\175\50", "\43\173\163\151\172\145\175\50", 
"\43\173\141\166\145\162\141\147\145\175\50", "\43\173\160\162\157\144\165\143\164\175\50", "\43\173\163\165\155\175\50", 
"\43\173\155\151\156\151\155\165\155\175\50", "\43\173\155\141\170\151\155\165\155\175\50", 
"\43\173\162\145\166\145\162\163\145\175\50", null, null, null, null, null, "\133", "\135", "\74", "\76", null, null, null, 
"\50\52\51", null, "\74", "\76", "\133", "\135", null, null, "\52\175", null, };
public static final String[] lexStateNames = {
   "DEFAULT", 
   "IN_SLC", 
   "IN_MLC", 
   "LOCATOR", 
   "EXPR", 
};
public static final int[] jjnewLexState = {
   -1, -1, 1, 2, 0, -1, 0, -1, -1, -1, -1, -1, 3, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, 0, -1, -1, -1, -1, -1, -1, 0, -1, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[33];
private final int[] jjstateSet = new int[66];
protected char curChar;
public JavaPPTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}
public JavaPPTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private final void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 33; i-- > 0;)
      jjrounds[i] = 0x80000000;
}
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}
public void SwitchTo(int lexState)
{
   if (lexState >= 5 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   Token t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   String im = jjstrLiteralImages[jjmatchedKind];
   t.image = (im == null) ? input_stream.GetImage() : im;
   t.beginLine = input_stream.getBeginLine();
   t.beginColumn = input_stream.getBeginColumn();
   t.endLine = input_stream.getEndLine();
   t.endColumn = input_stream.getEndColumn();
   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

public Token getNextToken() 
{
  int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   switch(curLexState)
   {
     case 0:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_0();
       if (jjmatchedPos == 0 && jjmatchedKind > 43)
       {
          jjmatchedKind = 43;
       }
       break;
     case 1:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_1();
       if (jjmatchedPos == 0 && jjmatchedKind > 5)
       {
          jjmatchedKind = 5;
       }
       break;
     case 2:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_2();
       if (jjmatchedPos == 0 && jjmatchedKind > 7)
       {
          jjmatchedKind = 7;
       }
       break;
     case 3:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_3();
       break;
     case 4:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_4();
       if (jjmatchedPos == 0 && jjmatchedKind > 60)
       {
          jjmatchedKind = 60;
       }
       break;
   }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
           matchedToken = jjFillToken();
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

}
